// using System;
// using System.Collections;
// using System.Collections.Generic;
// using UnityEngine;
// using UnityEngine.EventSystems;


// public class UI_CraftingItemSlot : MonoBehaviour{
	//public class UI_CraftingItemSlot : MonoBehaviour, IDropHandler {
	
	// public event EventHandler<OnItemDroppedEventArgs> OnItemDropped;
	
	// public class OnItemDroppedEventArgs : EventArgs{
		// public Item item;
		// public int x;
		// public int y;
	// }
	
	// private int x; 
	// private int y;
	
	// public void OnDrop(PointerEventData eventData){
		// UI_ItemDrag.Instance.Hide();
		// Item item = UI_ItemDrag.Instance.GetItem();
		// OnItemDropped?.Invoke(this, new OnItemDroppedEventArgs {item = item, x = x, y = y});
	// }

	// public void SetXY(int x, int y){
		// this.x = x;
		// this.y = y;
	// }
// }



UI ITEM DRAG COPY

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using TMPro;

public class UI_ItemDrag : MonoBehaviour {

    public static UI_ItemDrag Instance { get; private set; }

    //private Canvas canvas;
    private RectTransform rectTransform;
    private RectTransform parentRectTransform;
    private CanvasGroup canvasGroup;
    private SpriteRenderer spriteRenderer;
    private Item item;
    private TextMeshProUGUI amountText;

    private void Awake() {
        Instance = this;

        rectTransform = GetComponent<RectTransform>();
        canvasGroup = GetComponent<CanvasGroup>();
        //canvas = GetComponentInParent<Canvas>();
		spriteRenderer = transform.parent.GetComponent<SpriteRenderer>();
        amountText = transform.Find("AmountText").GetComponent<TextMeshProUGUI>();
        parentRectTransform = transform.parent.GetComponent<RectTransform>();

        Hide();
    }

    private void Update() {
        UpdatePosition();
    }

    private void UpdatePosition() {
        RectTransformUtility.ScreenPointToLocalPointInRectangle(parentRectTransform, Input.mousePosition, null, out Vector2 localPoint);
        transform.localPosition = localPoint;
    }

    public Item GetItem() {
        return item;
    }

    public void SetItem(Item item) {
        this.item = item;
    }

    public void SetSprite(Sprite sprite) {
        spriteRenderer.sprite = sprite;
    }

    public void SetAmountText(int amount) {
        if (amount <= 1) {
            amountText.text = "";
        } else {
            // More than 1
            amountText.text = amount.ToString();
        }
    }

    public void Hide() {
        gameObject.SetActive(false);
    }

    public void Show(Item item) {
        gameObject.SetActive(true);

        SetItem(item);
        SetSprite(item.GetSprite());
        SetAmountText(item.amount);
        UpdatePosition();
    }

}

## CRAFTING ITEM SLOT COPY
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

public class CraftingItemSlot : MonoBehaviour, IDropHandler {

	public void OnDrop(PointerEventData eventData){
		
		if (eventData.pointerDrag != null){
			eventData.pointerDrag.GetComponent<RectTransform>().position = GetComponent<RectTransform>().position;
		}
		
	
		//Debug.Log("dropped " + eventData.pointerDrag.tag);
	}
	
	
	
}